#include<bits/stdc++.h>
using namespace std ;
#define ll long long
#define udll unsigned long long
#define pb push_back
#define mii map <int, int>
#define mll map <ll, ll>
#define pii pair <int, int>
#define pll pair <ll, ll>
#define vi vector <int>
#define vd vector <double>
#define vll vector <ll>
#define fi first
#define se second
#define si set <int>
#define sll set <ll>
#define spii set <pii>
#define vs vector <string>
#define vpii vector <pair <int,int> >
#define vpll vector <pair <long long,long long> >
#define vvi vector <vector <int> >
#define vvpii vector <vector <pii > >
#define mp make_pair
#define vvll vector <vll>
#define vsi vector <si>
#define forn(i, n) for (int i = 0; i <= (n); i++)
#define rep(i, n) for (int i = 0; i < (n); i++)
#define for1(i, n) for (int i = 1; i < (n); i++)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(),(x).rend()
#define haha ios::sync_with_stdio(false); cin.tie(0);cout.tie(0)
const ll mod = 1e9 + 7 ;

void elections(deque<char> &dq , ll n)
{

    ll c1 = 0 , c2 = 0 ;

	while(!dq.empty())
	{
		char x = dq.front() ;

		dq.pop_front() ;

		ll c3 = 0 ;

		if(x == '-')
		{
			c3++ ;
			while(dq.front() == '-')
			{
				c3++ ;
				dq.pop_front() ;
			}

			if(dq.front() == 'A')
				c1 += c3 ;


		}

		else if(x == 'A')
		{
			c1++ ;

			if(dq.front() == '-')
			{
				while(dq.front() == '-')
				{
					c3++ ;
					dq.pop_front() ;
				}

				if(dq.front() == 'A')
					c1 += c3 ;
			}
			else
                continue ;
		}

		else if(x == 'B')
		{
			c2++ ;

			if(dq.front() == '-')
			{
				while(dq.front() == '-')
				{
					c3++ ;
					dq.pop_front() ;
				}

				if(dq.front() == 'A')
				{
					ll votes = floor(c3/2) ;
          
					c1 += votes ;

					c2 += votes ;
				}

				else if(dq.front() == 'B')
					c2 += c3 ;
			}

		}

	}


	if(c1 > c2)
		cout << "A" ;

	else if(c2 > c1)
		cout << "B" ;

	else if(c1 == c2)
	{
		 cout << "Coalition government" ;
	}

}

int main()
{
	ll n ;

	cin >> n ;

	char x ;

	deque <char> dq ;

	for(ll i  = 0 ; i < n ; i++)
	{
		cin >> x ;

		dq.push_back(x) ;
	}

	elections(dq , n) ;

}
